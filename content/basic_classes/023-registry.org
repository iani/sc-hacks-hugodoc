+++
title = "Registry: Hierarchical Namespaces"
weight = 23
+++

This class uses the =Library= class to store and  retrieve objects using any array of objects as key.  This extends the way that =Pdef=, =Ndef=, =OSCdef= work, making it possible for any class to store its instances in an arbitrary hierarchical path, without subclassing.  To create this behavior one can then add a method to =Symbol= for accessing the kind of object needed.  For example: =\aSymbol.oscFunc= accesses =OSCFunc= instances. This also allows easier customization of how the object is created if not found. 

#+HTML: <!-- more -->

* How it works

Store an object in Library under an array of objects (called a /path/).  When accessing the path, create the object if not already stored, else return the previously stored object.

* Who uses it

- =SynthPlayer= registers its instances in the current environment under their names.
- 
- =Function:oscFunc= and =Symbol:removeOsc= registers =OSCFuncs= under their path names in order to remove existing OSCFunc instances when creating a new one under the same path. 

* Example

This is the code that makes it possible to create or modify an OSCFunc bound to a symbol.  It defines the methods =Function:oscFunc= and =Symbol:removeOsc=.

#+BEGIN_SRC sclang
+ Function {
	oscFunc { | path |
		path.removeOsc;
		^Registry ('oscFuncs', path, { OSCFunc (this, path) });
	}
}

+ Symbol {
	removeOsc {
		Registry.doIfFound ('oscFuncs', this, { | found |
			found.objectClosed;
			found.free;
		});	
	}
}
#+END_SRC
