+++
title = "Patterns updating current environment"
weight = 14
+++

=anEnvironment.eplay(envir)=

Play an event as EventPattern, updating the values in envir from each event.  Use custom event type: envEvent.  This only updates the values in the environment.  The sound must be generated by =Function:eplay=.  See examples below.

#+HTML: <!-- more -->

Play the receiver Event in the environment given in argument =envir= using a custom event type to just set the values of corresponding variables at each event.  For example, playing =()= set =~freq=  to =60.midicps= every 1 second.  

#+BEGIN_SRC javascript
  (dur: 0.1).eplay;
#+END_SRC

#+BEGIN_SRC javascript
().eplay;
#+END_SRC

#+BEGIN_SRC javascript
() eplay: \newEnvir;
#+END_SRC

* Example 1: Single synth, pattern, gui update

#+BEGIN_SRC javascript
  (degree: Pbrown (0, 30, 2, inf), dur: 0.1).eplay;
  { | freq = 400 | SinOsc.ar (freq, 0, 0.1 )}.eplay;
  \window.vlayout (CSlider (\freq)).front;
#+END_SRC
* Example 2: Envelope gate on-off
To test triggering of envelopes, instead of writing this:

#+BEGIN_SRC javascript
  { | freq = 400, gate = 0 |
	  var env;
	  env = Env.adsr ();
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: gate, doneAction: 0)
  }.eplay;
  //:
  {
	  inf do: { | i |
		  ~gate = i % 2;
          0.1.rrand (0.5).wait
	  }
  }.rout;
#+END_SRC

one may write this: 

#+BEGIN_SRC javascript
  { | freq = 400, gate = 0 |
	  var env;
	  env = Env.adsr (0.01, 0.01, 0.9, 0.3);
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: gate, doneAction: 0)
  }.eplay;

  (dur: Pwhite (0.01, 0.15, inf), gate: Pseq([0, 1], inf)).eplay;
  //: Note the overlap with the still playing note in the freq change:
  (dur: 0.15, gate: Pseq([0, 1], inf), degree: Pstutter (4, Pbrown (-5, 20, 5, inf))).eplay;
#+END_SRC
* Example 3: Many patterns + many synths in same environment

#+BEGIN_SRC javascript
  { | freq = 400 | SinOsc.ar (freq * [1, 1.25], 0, 0.1) }.eplay;
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;
  //: Start the next synth later:
  { | freq = 400 |
	  Ringz.ar (PinkNoise.ar, freq * 1.2)
  }.eplay (\synth2);
  //: Test fade out when releasing synth to replace with new one:
  ~fadeTime = 5;
  //:
  { | freq = 400, ringTime = 3 |
	  Ringz.ar (PinkNoise.ar, freq * [2, 1.2], ringTime)
  }.eplay (\synth2);
  //:
  ~ringTime = 0.03;
  //:
  ~ringTime = 2;
  //: Start a new pattern in place of the old one:
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf), ringTime: Pwhite (0.01, 1.2, inf)).eplay;
  //: remove the ringTime from the next version of the pattern:
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;
  //: add a new pattern on the same environment, playing ringTime:
  (dur: 0.01, ringTime: Pbrown (0.001, 3, 0.1, inf)).eplay (\ringTime);``
  //: add a new pattern on the same environment, playing ringTime:
  (dur: 0.1, ringTime: Pwhite (0.01, 4, inf)).eplay (\ringTime);
  //:
#+END_SRC
