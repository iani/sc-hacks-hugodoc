+++
title = "Mini-Language Overview"
weight = 7
+++


The classes, methods and operators provided by /sc-hacks/ extend SuperCollider to simplify the coding of GUI and of sound / musical structure / interaction.  They are designed in the sense of a very small language.  Here is a summary. 

#+HTML: <!-- more -->

* Items connected to currentEnvironment: GUI, Synths, Patterns, Routines

* Operator and message overview

*This is a draft: Implementation of the following operators has just started.* /The purpose of the overview is to guide coding by keeping the different versions discrete and consistent./

** Operators on Functions

These are operators that are written after a function, and thus take a function as receiver.  They serve two main uses of functions in musical processes: 

1. Play a synth (=Function:play= : operator =+>=)
2. Play a routine (=Function:fork= : operator =*>=)


+> play as synth

*> play as routine (fork)

** Operators on Events

These are operators that are written after an event, and thus take an event as receiver.  They serve to play the event as EventPattern inside currentEnvironment, setting the environments keys (but not producing any sound by itself).  Furthermore, they serve to modify the event of such a playing EventPattern.

@> play

@>+ addEvent

@>! setEvent

@>@ addKey 

** Operators on Symbols

These are operators that are written after a symbol, and thus take a symbol as receiver. They are primarily used to link synths by setting the =out= and =in= environment variables in Nenvir instances to a common bus.

- =&>= :: set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes)
- =<&= :: set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes)

#+BEGIN_SRC javascript
receiver &>! argument
#+END_SRC


- =&>!= :: set the output bus of the receiver to the input bus of the argument, on a new private bus (both receiver and argument change)

#+BEGIN_SRC javascript
receiver &/> argument
#+END_SRC

- =&/>= :: Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth.

#+BEGIN_SRC javascript
receiver </> argument
#+END_SRC 

- =</>= :: Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths.

** Messages to symbols

splay

eplay

rplay

** Operators on strings (!?)

string +> symbol : play synthdef named by string on the symbol as SynthPlayer ?

* Playing Synths

* Playing Routines

* Playing patterns with default note events

* Playing patterns in currentEnvironment

* Creating GUIs
