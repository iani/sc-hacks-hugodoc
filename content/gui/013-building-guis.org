+++
title = "Building GUIs"
weight = 13
+++

This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps.

#+HTML: <!-- more -->

* Just a window

#+BEGIN_SRC javascript
//: 1 Just a window
Window ("window name").front;
#+END_SRC

* Add a slider and resize. 

Use VLayout for automatic resizing.

#+BEGIN_SRC javascript

Window ("window name")
.view.layout_ (
	VLayout (
		Slider ()
	)
).front;
//: Make the slider horizontal.
Window ("window name")
.view.layout_ (
	VLayout (
		Slider ()
		.orientation_ (\horizontal)
	)
).front;
#+END_SRC

* Add more sliders

Use a function to avoid repeating spec code!
Make the orientation an argument to enable customization.

#+BEGIN_SRC javascript
var makeSlider;

makeSlider = { | orientation = \horizontal |
	Slider ()
		.orientation_ (orientation)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.([\horizontal, \vertical].choose)} ! 10)
	)
).front;

#+END_SRC


* Add more arguments for controlSpec, label, and action

#+BEGIN_SRC javascript

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | controlSpec.map (value).postln }
	};
	HLayout (
		StaticText ().string_ (label),
		Slider ()
		.action_ ({ | me | action.(me.value)})
		.orientation_ (orientation)
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.([\horizontal, \vertical].choose)} ! 10)
	)
).front;

#+END_SRC


* Add number box, after the slider.

#+BEGIN_SRC javascript

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | controlSpec.map (value).postln }
	};
	HLayout (
		StaticText ().string_ (label),
		Slider ()
		.action_ ({ | me | action.(me.value)})
		.orientation_ (orientation),
		NumberBox ())
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.(
			max: 0.0.rrand (20.0),
			orientation: [\horizontal, \vertical].choose)} ! 10)
	)
).front;


#+END_SRC

* Add value update for number box and slider

#+BEGIN_SRC 

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec, mappedVal, slider, numberBox;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | value.postln }
	};
	HLayout (
		StaticText ().string_ (label),
		slider = Slider ()
		.action_ ({ | me |
			mappedVal = controlSpec.map (me.value);
			numberBox.value = mappedVal;
			action.(mappedVal)})
		.orientation_ (orientation),
		numberBox = NumberBox ()
		.action_ ({ | me |
			mappedVal = me.value;
			slider.value = controlSpec.unmap (mappedVal);
			action.(mappedVal)
		})
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({ | i |
			makeSlider.(format ("slider %", i),
				max: 0.0.rrand (20.0),
				orientation: [\horizontal, \vertical].choose)
		} ! 10)
	)
).front;


#+END_SRC

* Group the controlSpec arguments to make them more compact
Also initialize the values of gui elements

#+BEGIN_SRC javascript
var makeSlider;

makeSlider = { | label = "slider", controlSpec, orientation = \horizontal, action |
	var mappedVal, slider, numberBox;

	// convert controlSpec arg into ControlSpec
	controlSpec = (controlSpec ? []).asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | value.postln }
	};
	HLayout (
		StaticText ().string_ (label),
		slider = Slider ()
		.action_ ({ | me |
			mappedVal = controlSpec.map (me.value);
			numberBox.value = mappedVal;
			action.(mappedVal)})
		.orientation_ (orientation)
		.value_ (controlSpec unmap: controlSpec.default),
		numberBox = NumberBox ()
		.action_ ({ | me |
			mappedVal = me.value;
			slider.value = controlSpec.unmap (mappedVal);
			action.(mappedVal)
		})
		.value_ (controlSpec.default)
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*([\freq, \amp] collect: { | name |
			makeSlider.(format (" %", name),
				controlSpec: name,
				orientation: \horizontal /* [\horizontal, \vertical].choose */ )
		})
	)
).front;
END_SRC

* How to add all available options for Slider and NumberBox, eg. floating point digits etc?

Instead of adding more arguments, move to the next step:
Define a class and provide the options as defaults.

* Next steps

1. Control a routine from a GUI. 
   - Let the GUI elements set environment variables of an environment.
   - Let the routine run within this environment to have access to its variables.
   - Save the current settings on file.
   - Reload settings from file.
2. Do similar things as with 1, but with a synth instead of a routine.
3. Do similar things as with 1, but with an EventPattern instead of a routine.
