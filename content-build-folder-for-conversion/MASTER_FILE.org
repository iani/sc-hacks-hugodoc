+++
title = "MASTER FILE"
draft = true
+++

* Mini-Language Overview
:PROPERTIES:
:filename: mini-language-overview
:END:

The classes, methods and operators provided by /sc-hacks/ extend SuperCollider to simplify the coding of GUI and of sound / musical structure / interaction.  They are designed in the sense of a very small language.  Here is a summary. 

#+HTML: <!-- more -->

** Items connected to currentEnvironment: GUI, Synths, Patterns, Routines

** Operator and message overview

*This is a draft: Implementation of the following operators has just started.* /The purpose of the overview is to guide coding by keeping the different versions discrete and consistent./

*** Operators on Functions

These are operators that are written after a function, and thus take a function as receiver.  They serve two main uses of functions in musical processes: 

1. Play a synth (=Function:play= : operator =+>=)
2. Play a routine (=Function:fork= : operator =*>=)


+> play as synth

*> play as routine (fork)

*** Operators on Events

These are operators that are written after an event, and thus take an event as receiver.  They serve to play the event as EventPattern inside currentEnvironment, setting the environments keys (but not producing any sound by itself).  Furthermore, they serve to modify the event of such a playing EventPattern.

@> play

@>+ addEvent

@>! setEvent

@>@ addKey 

*** Operators on Symbols

These are operators that are written after a symbol, and thus take a symbol as receiver. They are primarily used to link synths by setting the =out= and =in= environment variables in Nenvir instances to a common bus.

- =&>= :: set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes)
- =<&= :: set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes)

#+BEGIN_SRC javascript
receiver &>! argument
#+END_SRC


- =&>!= :: set the output bus of the receiver to the input bus of the argument, on a new private bus (both receiver and argument change)

#+BEGIN_SRC javascript
receiver &/> argument
#+END_SRC

- =&/>= :: Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth.

#+BEGIN_SRC javascript
receiver </> argument
#+END_SRC 

- =</>= :: Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths.

*** Messages to symbols

splay

eplay

rplay

*** Operators on strings (!?)

string +> symbol : play synthdef named by string on the symbol as SynthPlayer ?

** Playing Synths

** Playing Routines


** Playing patterns with default note events

** Playing patterns in currentEnvironment

** Creating GUIs

* Improving Function:eplay
:PROPERTIES:
:filename: improving_eplay
:END:

Individual improvement steps for Function:eplay: Done and TODO.  Thesse notes are from an early stage in development.  Now the functionality of most done steps has been integrated in class =SynthPlayer=.  

#+HTML: <!-- more -->

** Done (11 Jun 2017 21:48)
- Store the resulting synth in envir under =[\synths, synthName]= (default for =synthName=: =synth=).
- If previous synth exists under =[\synths, synthName]= path, then free/release it.
- When a synth ends, remove it from its path in envir.
- Make sure that when a synth =previousSynth= is released by replacing it through a new synth created through =Function:eplay=, the =previousSynth= ending does not remove the new synth that has already been stored in the same path.
- Notification actions for updates from enviroment variable changes are added when the Synth starts (not when the =Function:play= message is sent). This way, there are no more errors "Node not found" when changing the environment before the synth has started.

** Done (19 Jun 2017 10:52): 
*** Synth start-stop (release) and set control from Event:eplay (EventPatterns)

The following will add some complexity to the current scheme and may therefore be added later on only.

- Define =SynthPlayer= to add synth start-stop capabilities to =Function:eplay=
- Add synths instance variable to Nevent for faster access to SynthPlayers

In addition to listening for changes from the =currentEnvironment=, a second notification mechanism should be added to Function:eplay, to enable creating new synths, releasing or freeing this synth when playing EventPatterns with an =EventStreamPlayer=.  A simple way to do this is by a stream which generates the commands to be played.  The stream is stored in a key with the same name as the synth to be controlled.  Function:eplay or SynthPlayer:play adds the environment as notifier to the synth with the synth's name as message and a switch statement which choses the action to be performed depending on the value that was sent in addition to the key (message) by the changed message. A draft for this code has been added now to Function:eplay: 

#+BEGIN_SRC javascript
  synth.onStart (this, {| myself |
	  // "Synth started, so I add notifiers for updates".postln;
	  argNames do: { | param |
		  synth.addNotifier (envir, param, { | val |
			  synth.set (param, val);
		  });
		  // Experimental: 
		  synth.addNotifier (envir, name, { | command |
			  //	command.postln;
			  switch (command,
				  \stop, {
					  synth.objectClosed;
					  synth.release (envir [\releaseTime] ? 0.02);
				  },
				  { postf ("the command was: %\n", command)}
			  )
		  })
	  };
  });
#+END_SRC
** Still TODO (19 Jun 2017 10:52)
*** Synth start-stop notifications for GUI and other listeners
- When a new synth starts or when an old synth is removed, it should emit notifications so that GUIS that depend on it update their status.  Such guis may be:
  - Start-stop buttons
  - Guis with widgets for controlling the synths parameters.  When a new synth starts, then the old gui should be replaced with a new one with widgets corresponding to the new synth's control parameters.
  Note: Possibly the notification should be emitted from the =\synthName= under which the synth is stored.  The messages may be:
  - =\started=
  - =\stopped=
  - =\replaced=
    The above is subject to testing. 

#+HTML: <!-- more -->

** Notes
- When this is done, it should be possible to create multiple gui windows for multiple synths running in the same environment. However, parameters under the same name will control the parameters under that name for all synths in that environment.
- To develop the right code for this, do it with a plain function, adding the functionalities one-by-one.

** Current =Function:eplay= method code

** Drafts

See [[https://github.com/iani/sc-hacks/blob/master/LabCode/rebuildFunctionEplay.scd]] for draft used to build this functionality in =SynthPlayer=

* Play a function in the environment
:PROPERTIES:
:filename: function-eplay
:END:

1. Provide arguments for playing a function from values found in an environment.
2. connect all control names in the function's arguments to an environment for auto-update
3. Free all notifications from the synth when it stops playing.

#+HTML: <!-- more -->

** Method code

#+BEGIN_SRC javascript
+ Function {
	eplay { | envir = \envir |
		var synth;
		envir = envir.asEnvironment;
		envir use: {
			var argNames, args;
			argNames = this.def.argNames;
			args = argNames.collect ({ | name |
				[name, currentEnvironment [name]]
			}).select ({ | pair |
				pair [1].notNil;
			}).flat;
			//  arg target, outbus = 0, fadeTime = 0.02, addAction=\addToHead, args;
			synth = this.play  (
				~target.asTarget, ~outbus ? 0, ~fadeTime ? 0.02,
				~addAction ? \addToHead, args
			);
			argNames do: { | param |
				synth.addNotifier (envir, param, { | val |
					synth.set (param, val);
				});
			};
		};
		// This is done by addNotifier anyway:
		//		synth.onEnd (this, { synth.objectClosed });
		^synth;
	}
}
#+END_SRC

** Example

#+BEGIN_SRC javascript
\window.vlayout (
	HLayout (
		StaticText ().string_ (\freq),
		Slider.horizontal.connectEnvir (\freq),
		NumberBox ().connectEnvir (\freq)
	)
).front;
//:
{
	loop {
		~freq = 400 + 400.rand;
	   1.wait;
	}
}.fork;
//:
{ | freq = 440 | SinOsc.ar (freq, 0, 0.1) }.eplay;
//:
#+END_SRC

* Playing Events as Patterns
:PROPERTIES:
:filename: events-as-patterns
:END:

/sc-hacks/ provides two ways to play Events as patterns: 
1. =\name pplay: (event ...)= Play event as EventPattern, using default =play= key settings, i.e. playing notes unless something else is specified.
2. =(event ...) eplay: \name= Play event as EventPattern using a custom partial event type =\envEvent=. This does not produce any sounds per default, but only writes the results of playing all streams in the event, including the default translations of =\degree=, =\ctranspose= and related keys, to =currentEnvironment=. These changes are broadcast to the system using the =changed= mechanism and can be used to drive both GUI and synths.

#+HTML: <!-- more -->

Both =pplay= and =eplay= use =EventPattern=, =EventStream= and =EventStreamPlayer=.  This means, it is easy to modify the event and thus change the behaviour of the player, while it is playing.  

** Symbol pplay

Here the pattern is modified with =addKey=, =addEvent= and =setEvent= while playing:

#+BEGIN_SRC javascript
\p.pplay;
//:
\p.pplay ((freq: Pbrown (10, 200, 10, inf) * 10));
//:
\p.pplay ((degree: Pbrown (1, 20, 3, inf)));
//:
\p.addKey (\dur, 0.1);
//:
\p addEvent: (ctranspose: Pstutter (20, Pbrown (-6, 6, 1, inf)), legato: Pseq ([0.2, 0.1, 0.2, 4], inf));
//:
\p setEvent: (freq: Pwhite (300, 3000, inf), dur: Pseq ([0.1, 0.3], inf), legato: 0.1);
#+END_SRC

** Event eplay

#+BEGIN_SRC javascript
  (freq: Pwhite (400, 20000, inf).sqrt, dur: 0.1).eplay;
  \window.vlayout (CSlider (\freq)).front;
  //:
  (freq: Pwhite (400, 2000, inf), dur: 0.1).eplay;
  //:
  \test splay: { SinOsc.ar (\freq.kr (400), 0, 0.1) };
  //:
  (degree: Pbrown (0, 20, 2, inf), dur: 0.1).eplay;
  //: Play different functions in parallel, with crossfade: 
  ~fadeTime = 2;
  {
	  var players;
	  players = Pseq ([
		  { LFPulse.ar (\freq.kr (400) / [2, 3], 0, 0.5, 0.1) },
		  /*
		    { Blip.ar (\freq.kr (400 * [1, 1.2]),
		    LFNoise0.kr (5).range (5, 250),
		    0.3)
		    },
		  ,*/
		  {
			  LPF.ar (
				  Ringz.ar (PinkNoise.ar (0.1), \freq.kr (400) * [1, 1.5], 0.1),
				  LFNoise2.kr (1).range (400, 1000)
			  )
		  }
	  ], inf).asStream;
	  loop {
		  \test splay: players.next;
		  2.5.wait;
	  }
  }.fork;

  //: NOTE: other keys are overwritten in the source event of the other
#+END_SRC

* Modify Patterns while playing
:PROPERTIES:
:filename: event-stream
:END:

An EventStream makes it easy to modify patterns while playing them. 

#+HTML: <!-- more -->

** How it works
An =EventPattern= creates =EventStreams= which are played by =EventStreamPlayer=.  =EventStream= stores an event whose values are streams and uses this to produce a new event which is played by EventStreamPlayer.  It is thus possible to modify the event stored in the EventStream while the EventStreamPlayer is playing it.  This makes it easy to modify a playing pattern (which is difficult when using Pbind).

** Example

#+BEGIN_EXAMPLE
() +> \e;
0.1 +>.dur \e;
Pseq ((0..20), inf) +>.degree \e;
Prand ((0..20), inf) +>.degree \e;
(freq: Pfunc ({ 300 rrand: 1000 }), dur: Prand ([0.1, 0.2], inf)) +> \e;
(freq: Pfunc ({ 30.rrand(80).midicps }), dur: Pfunc ({ 0.1 exprand: 1 }), legato: Prand ([0.1, 2], inf)) +> \e;
(degree: Pseq ((0..20), inf), dur: 0.1) +!>.degree \e;
#+END_EXAMPLE

*Note:*

- =+>= adds all key-value pairs of an event to the event being played.
- =+!>= replaces the contents of the event being played by the contents of the new event.

* Patterns updating current environment
:PROPERTIES:
:filename: event-eplay
:END:

=anEnvironment.eplay(envir)=

Play an event as EventPattern, updating the values in envir from each event.  Use custom event type: envEvent.  This only updates the values in the environment.  The sound must be generated by =Function:eplay=.  See examples below.

#+HTML: <!-- more -->

Play the receiver Event in the environment given in argument =envir= using a custom event type to just set the values of corresponding variables at each event.  For example, playing =()= set =~freq=  to =60.midicps= every 1 second.  

#+BEGIN_SRC javascript
  (dur: 0.1).eplay;
#+END_SRC

#+BEGIN_SRC javascript
().eplay;
#+END_SRC

#+BEGIN_SRC javascript
() eplay: \newEnvir;
#+END_SRC

** Example 1: Single synth, pattern, gui update

#+BEGIN_SRC javascript
  (degree: Pbrown (0, 30, 2, inf), dur: 0.1).eplay;
  { | freq = 400 | SinOsc.ar (freq, 0, 0.1 )}.eplay;
  \window.vlayout (CSlider (\freq)).front;
#+END_SRC
** Example 2: Envelope gate on-off
To test triggering of envelopes, instead of writing this:

#+BEGIN_SRC javascript
  { | freq = 400, gate = 0 |
	  var env;
	  env = Env.adsr ();
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: gate, doneAction: 0)
  }.eplay;
  //:
  {
	  inf do: { | i |
		  ~gate = i % 2;
          0.1.rrand (0.5).wait
	  }
  }.rout;
#+END_SRC

one may write this: 

#+BEGIN_SRC javascript
  { | freq = 400, gate = 0 |
	  var env;
	  env = Env.adsr (0.01, 0.01, 0.9, 0.3);
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: gate, doneAction: 0)
  }.eplay;

  (dur: Pwhite (0.01, 0.15, inf), gate: Pseq([0, 1], inf)).eplay;
  //: Note the overlap with the still playing note in the freq change:
  (dur: 0.15, gate: Pseq([0, 1], inf), degree: Pstutter (4, Pbrown (-5, 20, 5, inf))).eplay;
#+END_SRC
** Example 3: Many patterns + many synths in same environment

#+BEGIN_SRC javascript
  { | freq = 400 | SinOsc.ar (freq * [1, 1.25], 0, 0.1) }.eplay;
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;
  //: Start the next synth later:
  { | freq = 400 |
	  Ringz.ar (PinkNoise.ar, freq * 1.2)
  }.eplay (\synth2);
  //: Test fade out when releasing synth to replace with new one:
  ~fadeTime = 5;
  //:
  { | freq = 400, ringTime = 3 |
	  Ringz.ar (PinkNoise.ar, freq * [2, 1.2], ringTime)
  }.eplay (\synth2);
  //:
  ~ringTime = 0.03;
  //:
  ~ringTime = 2;
  //: Start a new pattern in place of the old one:
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf), ringTime: Pwhite (0.01, 1.2, inf)).eplay;
  //: remove the ringTime from the next version of the pattern:
  (dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;
  //: add a new pattern on the same environment, playing ringTime:
  (dur: 0.01, ringTime: Pbrown (0.001, 3, 0.1, inf)).eplay (\ringTime);``
  //: add a new pattern on the same environment, playing ringTime:
  (dur: 0.1, ringTime: Pwhite (0.01, 4, inf)).eplay (\ringTime);
  //:
#+END_SRC

* "Operator Overview"
:PROPERTIES:
:filename: operator-overview
:END:


/sc-hacks/ uses binary operators to shorten and help classify the coding of common operations such as playing a synth or a pattern.  The syntax of a binary operator in SuperCollider is: 

#+BEGIN_SRC javascript
receiver operator[optional: .adverb] argument
#+END_SRC

For example:

#+BEGIN_SRC javascript
// receiver      operator adverb   argument
{ WhiteNoise.ar(0.1) } +>.newenvir \mysynth
#+END_SRC

Here is a list of operators introduced in /sc-hacks/.

** List of Operators

Planned are 4 operators taking functions as argument, 4 operators taking event as argument, and 5 operators taking a symbol as argument. Currently (26 Jun 2017 08:57) the 8 first operators have been tested.

1. ={ function } +> synthname = play as synth
1. ={ function } *> synthname= play as routine (fork)
1. ={ function } **> synthname= wrap in loop and play as routine (fork)
1. ={ function } <* key= evaluate function whenever value of key is set in envir
1. =( event ) @> patternname= play
1. =( event ) @>+ patternname= addEvent
1. =( event ) @>! patternname= setEvent
1. =( event ) <@ key= play next event from EventStream created from event, whenever value of key is set in envir.
1. =receiver &> argument= set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes)
1. =receiver <& argument= set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes)
1. =receiver &>! argument= set the output bus of the receiver to the input bus of the argument, - on a new private bus (both receiver and argument change)
1. =receiver &/> argument= Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth. (neither receiver nor argument changes).
1. =receiver </> argument= Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths (neither receiver nor argument changes).

** Examples

#+BEGIN_SRC javascript
// ================================================================
// ================ Routines
//: Start a routine 
{
	loop {
		~freq = 500 rrand: 4000;
		1.wait;
	}
} *> \rout1
//: replace this with a different routine
{
	loop {
		~freq = 100 rrand: 400;
		0.2.exprand (0.5).wait;
	}
} *> \rout1
//: Shortcut for loop {}
{
	~freq = 50 exprand: 400;
	0.1.wait;
} **> \rout1;
//: stop the routine
\rout1.routine.stop;

// ================================================================
// ================ Patterns
//: start a new pattern
(dur: 0.1, degree: Pseq ((0..7), inf)) @> \pat1;
//: replace the pattern running at \pat1 with a new one
(dur: Pwhite (0.01, 0.1, inf), degree: Pwhite(0, 7, inf)) @> \pat1;
//: add event's contents to the playing event
(dur: Pwhite (0.01, 2.1, inf)) @>+ \pat1;
//: testing function in event key
// Defer runs the function after the event has played all parameters
(func1: {{ postf("freq param is: %\n", ~freq )}.defer }) @>+ \pat1;

//: ================================================================
//: ================ More function operators
//: Testing function in envir
{ | freq | { SinOsc.ar(freq, 0, EnvGen.kr(Env.perc(0.01, 0.1, 0.1)))}.play } <* \freq;

//: ========== Polyphony: EventStreams triggered by a pattern playing in currentEnvironment
() @> \pat1;
// { ~freq.postln; } <* \freq; // just as a test;
(degree: Pseq((0..7), inf)) <@ \freq;
//: add another stream on a different label
(degree: Pseq((0..7).scramble, inf)) <@.label2 \freq;
//: add another stream on a different label yet
(degree: Pseq((0..7) + 10, inf), dur: 0.1) <@.label3 \freq;
//:
#+END_SRC

** Additional possible operators

Draft: 

*** Within the currentEnvironment Nevent

When one (or any) parameter in the currentEnvironment changes:

1. Play an event (from an EventPattern / EventStream) =<@=
1. Play a synth from a SynthPlayer =<+=

***  Within an EventStreamPlayer playing within an Nevent (with Event @>)

- Play an event (from an EventPattern / EventStream)
- Evaluate a function

** General principle: 4 types of objects stored under names in environments.

**  Function:play: ={} +>.envir \playerName=

#+BEGIN_SRC javascript
  // Start a synth and store it in \synth1
  { SinOsc.ar(\freq.kr(400), 0, \amp.kr(0.1)) } +> \synth1;
  //: Start a routine modifying the freq parameter
  {
	  loop {
		  ~freq = 50 rrand: 100;
		  5.1.wait;
	  }
  } rout: \envir;
  //: Replace the function playing in \synth1
  { Ringz.ar (WhiteNoise.ar (\amp.kr (0.1)), \freq.kr (400)) } +> \synth1;
  //: Start a synth in a different environment
  { LFSaw.ar(\freq.kr(400), 0, \amp.kr(0.1)) } +>.envir2 \synth1;
  //: Start a routine modifying the freq parameter in the second environment
  {
	  loop {
		  ~freq = 400 rrand: 4000;
		  0.1.wait;
	  }
  } rout: \envir2;
  //: Test the contents of the library
  Library.global.dictionary;
#+END_SRC

** Accessing SynthPlayers, EventPatterns/EventStreamPlayers, Routines and Windows

The following messages are used to access a SynthPlayer, EventStreamPlayer, Routine or Window stored under a name in an environment.  If no enviroment is specified, then the currentEnvironment is used. 

- =symbol.synth(optional: envir)=
- =symbol.pattern(optional: envir)=
- =symbol.routine(optional: envir)=
- =symbol.window(optional: envir)=

Additionally, the following introspection methods are provided: 

- =Nevent:envirs= : Dictionary with all Nenvirs stored in Library under =\environments=
- =Registry;envirs= : Synonym of =Nevent:envirs=
- =\envirName.synths= : All synth players of Nenvir named =\envirName=.
- =\envirName.patterns= : All EventStreamPlayers of Nenvir named =\envirName=.
- =\envirName.routines= : All Routines of Nenvir named =\envirName=.
- =\envirName.windows= : All windows of Nenvir named =\envirName=.

*** Method implementation code
The code implementing these methods for =Symbol= in =Nevent.sc= is: 

#+BEGIN_SRC javascript
 // Return nil if no element found.
  // Also, do not push the environment if created.
  synth { | envir |
	  ^Registry.at (envir.asEnvironment (false), \synths, this);
  }

  pattern { | envir |
	  ^Registry.at (envir.asEnvironment (false), \patterns, this);
  }

  routine { | envir |
	  ^Registry.at (envir.asEnvironment (false), \routines, this);
  }

  window { | envir, rect |
	  // always construct new window, and push the environment
	  ^Registry (envir.asEnvironment, \windows, this, {
		  Window (this, rect)
		  .onClose_ ({ | me | me.objectClosed; });
	  })
  }
#+END_SRC

*** Tests

#+BEGIN_SRC javascript
//: explicitly push \envir as currentEnvironment (only for clarity).
\envir.push;
//: Initially, no synth is available:
\envir.synths;
//: Also no synth is available in 
//: Play a function in envir: 
{ PinkNoise.ar(0.2) } +>.envir \test;
#+END_SRC

* Mini-Language Overview
:PROPERTIES:
:filename: mini-language-overview
:END:


The classes, methods and operators provided by /sc-hacks/ extend SuperCollider to simplify the coding of GUI and of sound / musical structure / interaction.  They are designed in the sense of a very small language.  Here is a summary. 

#+HTML: <!-- more -->

** Items connected to currentEnvironment: GUI, Synths, Patterns, Routines

** Operator and message overview

*This is a draft: Implementation of the following operators has just started.* /The purpose of the overview is to guide coding by keeping the different versions discrete and consistent./

*** Operators on Functions

These are operators that are written after a function, and thus take a function as receiver.  They serve two main uses of functions in musical processes: 

1. Play a synth (=Function:play= : operator =+>=)
2. Play a routine (=Function:fork= : operator =*>=)


+> play as synth

*> play as routine (fork)

*** Operators on Events

These are operators that are written after an event, and thus take an event as receiver.  They serve to play the event as EventPattern inside currentEnvironment, setting the environments keys (but not producing any sound by itself).  Furthermore, they serve to modify the event of such a playing EventPattern.

@> play

@>+ addEvent

@>! setEvent

@>@ addKey 

*** Operators on Symbols

These are operators that are written after a symbol, and thus take a symbol as receiver. They are primarily used to link synths by setting the =out= and =in= environment variables in Nenvir instances to a common bus.

- =&>= :: set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes)
- =<&= :: set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes)

#+BEGIN_SRC javascript
receiver &>! argument
#+END_SRC


- =&>!= :: set the output bus of the receiver to the input bus of the argument, on a new private bus (both receiver and argument change)

#+BEGIN_SRC javascript
receiver &/> argument
#+END_SRC

- =&/>= :: Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth.

#+BEGIN_SRC javascript
receiver </> argument
#+END_SRC 

- =</>= :: Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths.

*** Messages to symbols

splay

eplay

rplay

*** Operators on strings (!?)

string +> symbol : play synthdef named by string on the symbol as SynthPlayer ?

** Playing Synths

** Playing Routines

** Playing patterns with default note events

** Playing patterns in currentEnvironment

** Creating GUIs

* Creating GUIs
:PROPERTIES:
:filename: creating-guis
:END:

This library provides utilities for creating GUI elements and connecting them to both patterns and synths.  Here are some examples.

** Windows

** Sliders

** Buttons

* Building GUIs
:PROPERTIES:
:filename: building-guis
:END:

This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps.

#+HTML: <!-- more -->

** Just a window

#+BEGIN_SRC javascript
//: 1 Just a window
Window ("window name").front;
#+END_SRC

** Add a slider and resize. 

Use VLayout for automatic resizing.

#+BEGIN_SRC javascript

Window ("window name")
.view.layout_ (
	VLayout (
		Slider ()
	)
).front;
//: Make the slider horizontal.
Window ("window name")
.view.layout_ (
	VLayout (
		Slider ()
		.orientation_ (\horizontal)
	)
).front;
#+END_SRC

** Add more sliders

Use a function to avoid repeating spec code!
Make the orientation an argument to enable customization.

#+BEGIN_SRC javascript
var makeSlider;

makeSlider = { | orientation = \horizontal |
	Slider ()
		.orientation_ (orientation)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.([\horizontal, \vertical].choose)} ! 10)
	)
).front;

#+END_SRC


** Add more arguments for controlSpec, label, and action

#+BEGIN_SRC javascript

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | controlSpec.map (value).postln }
	};
	HLayout (
		StaticText ().string_ (label),
		Slider ()
		.action_ ({ | me | action.(me.value)})
		.orientation_ (orientation)
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.([\horizontal, \vertical].choose)} ! 10)
	)
).front;

#+END_SRC


** Add number box, after the slider.

#+BEGIN_SRC javascript

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | controlSpec.map (value).postln }
	};
	HLayout (
		StaticText ().string_ (label),
		Slider ()
		.action_ ({ | me | action.(me.value)})
		.orientation_ (orientation),
		NumberBox ())
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({makeSlider.(
			max: 0.0.rrand (20.0),
			orientation: [\horizontal, \vertical].choose)} ! 10)
	)
).front;


#+END_SRC

** Add value update for number box and slider

#+BEGIN_SRC 

var makeSlider;

makeSlider = { | label = "slider", min = 0, max = 10, step = 0, default = 0.5, orientation = \horizontal,
	action |
	var controlSpec, mappedVal, slider, numberBox;
	controlSpec = [min, max, \lin, step, default].asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | value.postln }
	};
	HLayout (
		StaticText ().string_ (label),
		slider = Slider ()
		.action_ ({ | me |
			mappedVal = controlSpec.map (me.value);
			numberBox.value = mappedVal;
			action.(mappedVal)})
		.orientation_ (orientation),
		numberBox = NumberBox ()
		.action_ ({ | me |
			mappedVal = me.value;
			slider.value = controlSpec.unmap (mappedVal);
			action.(mappedVal)
		})
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*({ | i |
			makeSlider.(format ("slider %", i),
				max: 0.0.rrand (20.0),
				orientation: [\horizontal, \vertical].choose)
		} ! 10)
	)
).front;


#+END_SRC

** Group the controlSpec arguments to make them more compact
Also initialize the values of gui elements

#+BEGIN_SRC javascript
var makeSlider;

makeSlider = { | label = "slider", controlSpec, orientation = \horizontal, action |
	var mappedVal, slider, numberBox;

	// convert controlSpec arg into ControlSpec
	controlSpec = (controlSpec ? []).asSpec;
	// provide default action if needed:
	action ?? {
		action = { | value | value.postln }
	};
	HLayout (
		StaticText ().string_ (label),
		slider = Slider ()
		.action_ ({ | me |
			mappedVal = controlSpec.map (me.value);
			numberBox.value = mappedVal;
			action.(mappedVal)})
		.orientation_ (orientation)
		.value_ (controlSpec unmap: controlSpec.default),
		numberBox = NumberBox ()
		.action_ ({ | me |
			mappedVal = me.value;
			slider.value = controlSpec.unmap (mappedVal);
			action.(mappedVal)
		})
		.value_ (controlSpec.default)
	)
};

Window ("window name")
.view.layout_ (
	VLayout (
		*([\freq, \amp] collect: { | name |
			makeSlider.(format (" %", name),
				controlSpec: name,
				orientation: \horizontal /* [\horizontal, \vertical].choose */ )
		})
	)
).front;
END_SRC

** How to add all available options for Slider and NumberBox, eg. floating point digits etc?

Instead of adding more arguments, move to the next step:
Define a class and provide the options as defaults.

** Next steps

1. Control a routine from a GUI. 
   - Let the GUI elements set environment variables of an environment.
   - Let the routine run within this environment to have access to its variables.
   - Save the current settings on file.
   - Reload settings from file.
2. Do similar things as with 1, but with a synth instead of a routine.
3. Do similar things as with 1, but with an EventPattern instead of a routine.

* Triggering Methods
:PROPERTIES:
:filename: triggering-methods
:END:

This section illustrates several different ways to trigger grains, envelopes or other gate-triggered UGens

** Triggering from lang with set

** Triggering internally UGens

*** Impulse, Dust etc.

*** Demand UGens

* Triggering EnvGen and Line
:PROPERTIES:
:filename: triggering-envgen
:END:

Besides controlling the amplitude shape of a single sound-event or note in its entirety, envelopes can also be used to generate streams of sound events with the same synth.  The same technique can also be applied to Line or Xline to arbitrarily construct shapes controlling any parameter on the fly.  Here are some examples explaining how to do this using either just the default *SCClassLibrary* and the *sc-hacks* library.

Two items are necessary to re-trigger envelope or line-segment UGens in a Synth:
1. The =doneAction= argument of the UGen in question must have a value of 0 in order to keep the Synth alive afer the UGen has finished playing.
2. The UGen in question must use a control in its =gate= argument. The UGen restarts whenever the value of the =gate= control changes from 0 to 1.  Furthermore, if the Envelope contains a release part, then the release part will be triggered when the =gate= control changes from 1 to 0.

** Caution: Use a name other than =gate= as control name for triggering

*NOTE: The control used to trigger the EnvGen /must have a name different than/ =gate=, otherwise SC will be unable to release the synth because it creates a second =gate= control by default when creating synthdefs from functions.  For example: 

#+BEGIN_SRC sclang
  //: This is wrong:
  a =  { | freq = 400, gate = 0 |
	  var env;
	  env = Env.adsr ();
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: gate, doneAction: 0)
  }.play;
  NodeWatcher.register (a); // register a to update state when it ends
  //: Test if a is playing
  a.isPlaying;
  // first let it make a sound:
  a.set (\gate, 1);
  //: then try to release it:
  a.release;
  //: The output amplitude is 0 but the synth is still playing:
  a.isPlaying;
  //: Try again, specifying a release time:
  a.release (0.1);
  //: To really stop the synth, you have to free it
  a.free;
  //: The synth has stopped playing. Synth count should be 0 in the server display
  a.isPlaying; // returns false
#+END_SRC

** Function play and Synth set (SCClassLibrary)
Here is a simple example using only the standard SCClassLibrary:

#+BEGIN_SRC sclang
  //: Start a triggerable synth and store it in variable a
  // Note: The EnvGen will not be triggered because trig is 0.
  // Thus the synth will not produce an audible signal.

  // use trig instead of gate as control name!
  a = { | freq = 400, trig = 0 |
	  var env;
	  env = Env.adsr ();
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: trig, doneAction: 0)
  }.play;
  //: Trigger the envelope
  a.set (\trig, 1);
  //: Release the envelope
  a.set (\trig, 0);
  //: Re-trigger the nevelope
  a.set (\trig, 1);
  //: Release the envelope again
  a.set (\trig, 0);
  //: Run a routine to start and stop the synth several times
  {
	  10 do: { | i |
		  a.set (\trig, (i + 1) % 2); // i+1 : start with trigger on
		  0.01.exprand (0.5).wait;
	  }
  }.fork;
  //: Do the same as above, but also change the frequency
  {
	  40 do: { | i |
		  // only change frequency when starting, not when releasing:
		  if (i + 1 % 2 > 0) { // i / 2: wholetone -> chromatic
			  a.set (\freq, (i / 2 + 60).midicps, \trig, 1);			
		  }{
			  a.set (\trig, 0);
		  };
		  0.01.exprand (0.5).wait;
	  };
  }.fork;
  //:

#+END_SRC

** Control through environment variables, using Function =+>=

In /sc-hacks/, the operator =+>= plays a function and stores its synth in the global Library using a =SynthPlayer= instance.  Additionally, it makes the synth react whenever an environment variable whose name corresponds to a control parameter of the synth is set in the =currentEnvironment=.  This makes it easy to control the synth through the environment.

#+BEGIN_SRC sclang
  { | freq = 400, trig = 0 |
	  var env;
	  env = Env.adsr ();
	  SinOsc.ar (freq, 0, 0.1)
	  ,* EnvGen.kr (env, gate: trig, doneAction: 0)
  } +> \test;
  //:
  ~trig = 1;
  //:
  ~trig = 0;
  //:
  {
	  var trig;
	  inf do: { | i |
		  trig = i + 1 % 2;
		  if (trig > 0) { ~freq = 300 rrand: 3000 };
		  ~trig = trig;
		  0.9.rand.wait;
	  };
  }.rout;
  // rout starts a routine like fork, and stores it in the library
  // under a name (default: 'routine')
  // Additionally, if a routine is running under the same name,
  // it stops that routine before starting the new one to replace it.
  //:
  {
	  var trig;
	  26 do: { | i |
		  trig = i + 1 % 2;
		  if (trig > 0) { ~freq = (i / 2 + 60).midicps };
		  ~trig = trig;
		  0.24.wait;
	  };
  }.rout;
  //:
  {
	  20 do: { | i |
		  ~trig = i + 1 % 2;
		  ~freq = 300 rrand: 3000;
		  0.9.rand.wait;
	  }
  }.rout;
#+END_SRC

* Playing With Data
:PROPERTIES:
:filename: playing-with-data
:END:

This section discusses problems and approaches for sonifying data using EventPlayer and SynthPlayer. 

** Data dimensions and play method

The data is a 2 dimensional array.  It is played as a =Pseq= along the first dimension.  This results in a stream of rows.  Each subsequent element returned by the stream is a row of data.

** Different ways of playing rows
*** Playing each data row as one Synth

*** Playing each d

* Playing Grains
:PROPERTIES:
:filename: playing-grains
:END:


Here are some examples for playing grains of sound from a buffer with 

To be provided ...

* Server Objects
:PROPERTIES:
:filename: server-objects
:END:

** Server
Each =Nevent= Environment has  only one Server instance.  Synths and Patterns play in that instance.

Open issue: Where to store the server of an Environment.  Possibilities: 

1. As variable =~server=
2. In Library using Registry, using =[environment \server]= as key
3. In prototype event for Nevent. (Needs to be programmed yet).
4. Do not store, use =Server.default=

Currently option 4 is used, to concentrate on finishing the other features of the library.  Adding multiple servers will probably require a =NeventGroup= class whose instances create and manage groups of Nevents playing on the same server. =NeventGroup= will store the selected Server instance in the parent event of each =Nevent= instance which it creates.

** Server objects managed by Nevent

These are: 

- The Group which is used to create all Synths in the event.
- Busses connecting inputs or outputs of Synths in the event to those of other events.
- Buffers used for playing by Synths

** Allocating Server Objects at Reboot

** Target

** Maintaining Target Group Order

** Busses

*** Bus Allocation

*** Bus Index Parameter Updates

* Registry: Hierarchical Namespaces
:PROPERTIES:
:filename: registry
:END:

This class uses the =Library= class to store and  retrieve objects using any array of objects as key.  This extends the way that =Pdef=, =Ndef=, =OSCdef= work, making it possible for any class to store its instances in an arbitrary hierarchical path, without subclassing.  To create this behavior one can then add a method to =Symbol= for accessing the kind of object needed.  For example: =\aSymbol.oscFunc= accesses =OSCFunc= instances. This also allows easier customization of how the object is created if not found. 

#+HTML: <!-- more -->

** How it works

Store an object in Library under an array of objects (called a /path/).  When accessing the path, create the object if not already stored, else return the previously stored object.

** Who uses it

- =SynthPlayer= registers its instances in the current environment under their names.
- 
- =Function:oscFunc= and =Symbol:removeOsc= registers =OSCFuncs= under their path names in order to remove existing OSCFunc instances when creating a new one under the same path. 

** Example

This is the code that makes it possible to create or modify an OSCFunc bound to a symbol.  It defines the methods =Function:oscFunc= and =Symbol:removeOsc=.

#+BEGIN_SRC sclang
+ Function {
	oscFunc { | path |
		path.removeOsc;
		^Registry ('oscFuncs', path, { OSCFunc (this, path) });
	}
}

+ Symbol {
	removeOsc {
		Registry.doIfFound ('oscFuncs', this, { | found |
			found.objectClosed;
			found.free;
		});	
	}
}
#+END_SRC

* Notification
:PROPERTIES:
:filename: notification
:END:

Notification: Register a function callback to a message and a pair of objects
=Notification= is an improved version of the [[http://doc.sccode.org/Classes/NotificationCenter.html][NotificationCenter class]].  This class enables objects to register a function which is called when another object changes according to some aspect.  The aspect is expressed by a symbol.  To trigger a notification action, one sends the message =changed= to an object together with a symbol expressing the aspect which changed.  The function will only be evaluated for those objects which have registered to listen to the changing object according to the given aspect symbol.  This allows detailed control of callback execution amongst objects of the system.  For example, one can tell a gui object to change its color to green when a synth starts, and to change its color to red when that synth stops.

=Notification= adds the following enhancements: 
- Ability to remove existing notification connections reliably.
- Several methods for easily adding or modifying connections between objects.
- Ability to remove all connections from an object with a single message, =objectClosed=, and also to execute additional actions when that object closes.  Closing here means that the object is freed and will no longer be used by the system.

** Examples
*** =onObjectClosed=

=Registry= uses =onObjectClosed= to remove objects by sending them that message:

#+BEGIN_SRC sclang
   *new { | ... pathAndFunc |
		var path, makeFunc, instance;
		makeFunc = pathAndFunc.last;
		path = pathAndFunc[0..pathAndFunc.size-2];
		instance = Library.global.atPath(path);
		if (instance.isNil) {
			instance = makeFunc.value;
			Library.global.putAtPath(path, instance);
			instance.onObjectClosed(this, {
				this.remove(*path)
			});
		};
		^instance;
  }
#+END_SRC

This is in turn used by =oscFunc= and =rout= methods for removing =OSCFunc= and =Routine= objects in order to replace them with new instances. 
*** =addNotifierOneShot=

The =addNotifierOneShot= method executes the registered Function just once. This is useful when it is clear that only one call is required. For example, the =onEnd= and =onStart= methods for =Node= make use of the =addNotifierOneShot= method:

#+BEGIN_SRC sclang
+ Node {
	onStart { | listener, action |
		NodeWatcher.register(this);
		listener.addNotifierOneShot(this, \n_go, action);
	}

	onEnd { | listener, action |
		NodeWatcher.register(this);
		//		this.isPlaying = true; // dangerous
		listener.addNotifierOneShot(this, \n_end, action);
	}
}
#+END_SRC

Similar extensions can be built for whatever object needs to monitor the closing or end of an object such as closing of a Window or stopping of a Pattern.

* Pattern and Synth play scenarios
:PROPERTIES:
:filename: pattern-synth-play
:END:

=Event:eplay= and =SynthPlayer= can play with several instances in parallel on the same environment, and also provide several additional features.  This section gives some examples that explore these features and show how they work and notes some questions regarding future features.

#+HTML: <!-- more -->

** Creating, starting and stopping patterns 

** Playing several patterns in the same environment

** Playing several synths in the same environment

* Playing Events as Patterns
:PROPERTIES:
:filename: playing-events-as-patterns
:END:

/sc-hacks/ provides two ways to play Events as patterns: 
1. =\name pplay: (event ...)= Play event as EventPattern, using default =play= key settings, i.e. playing notes unless something else is specified.
2. =(event ...) eplay: \name= Play event as EventPattern using a custom partial event type =\envEvent=. This does not produce any sounds per default, but only writes the results of playing all streams in the event, including the default translations of =\degree=, =\ctranspose= and related keys, to =currentEnvironment=. These changes are broadcast to the system using the =changed= mechanism and can be used to drive both GUI and synths.

#+HTML: <!-- more -->

Both =pplay= and =eplay= use =EventPattern=, =EventStream= and =EventStreamPlayer=.  This means, it is easy to modify the event and thus change the behaviour of the player, while it is playing.  

** Symbol pplay

Here the pattern is modified with =addKey=, =addEvent= and =setEvent= while playing:

#+BEGIN_SRC javascript
\p.pplay;
//:
\p.pplay ((freq: Pbrown (10, 200, 10, inf) * 10));
//:
\p.pplay ((degree: Pbrown (1, 20, 3, inf)));
//:
\p.addKey (\dur, 0.1);
//:
\p addEvent: (ctranspose: Pstutter (20, Pbrown (-6, 6, 1, inf)), legato: Pseq ([0.2, 0.1, 0.2, 4], inf));
//:
\p setEvent: (freq: Pwhite (300, 3000, inf), dur: Pseq ([0.1, 0.3], inf), legato: 0.1);
#+END_SRC

** Event eplay

#+BEGIN_SRC javascript
  (freq: Pwhite (400, 20000, inf).sqrt, dur: 0.1).eplay;
  \window.vlayout (CSlider (\freq)).front;
  //:
  (freq: Pwhite (400, 2000, inf), dur: 0.1).eplay;
  //:
  \test splay: { SinOsc.ar (\freq.kr (400), 0, 0.1) };
  //:
  (degree: Pbrown (0, 20, 2, inf), dur: 0.1).eplay;
  //: Play different functions in parallel, with crossfade: 
  ~fadeTime = 2;
  {
	  var players;
	  players = Pseq ([
		  { LFPulse.ar (\freq.kr (400) / [2, 3], 0, 0.5, 0.1) },
		  /*
		    { Blip.ar (\freq.kr (400 * [1, 1.2]),
		    LFNoise0.kr (5).range (5, 250),
		    0.3)
		    },
		  ,*/
		  {
			  LPF.ar (
				  Ringz.ar (PinkNoise.ar (0.1), \freq.kr (400) * [1, 1.5], 0.1),
				  LFNoise2.kr (1).range (400, 1000)
			  )
		  }
	  ], inf).asStream;
	  loop {
		  \test splay: players.next;
		  2.5.wait;
	  }
  }.fork;

  //: NOTE: other keys are overwritten in the source event of the other
#+END_SRC
